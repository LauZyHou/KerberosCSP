
/*
AS() = 收到Client的验证请求 -> 在KDC数据库中查找用户主体名称 -> if 找到匹配的项 then 获取主体私钥userKey -> 生成会话密钥sessionKey1和票证TGT1,用userKey加密为resp -> 向Client回复resp -> AS();
																else 回复错误消息 -> AS()

Client_Pre() = 向AS发送验证请求 -> 收到AS的resp -> if 正确消息 then 密钥解密resp拿到sessionKey1和TGT1 -> Client_Mid();
												else Client_Pre();

Client_Mid() = 向TGS发送请求(服务主体名称,TGT1,使用sessionKey1加密的验证者) -> 从TGS收消息 -> if 正确消息(即加密后的sessionKey2和TGT2) -> 解密 -> Client_Post();
																							  else Client_Pre();

TGS() = 收到Client的请求 ->  解密TGT1得到sessionKey1,再用sessionKey1解密得到验证者,再验证服务主体
				-> (if 成功验证 then 为用户主体和服务器生成sessionKey2,TGT2 -> 使用sessionKey1加密sessionKey2和TGT2 -> 回复这些信息给Client
				   else  回复错误消息) -> TGS();

Client_Post() = 向AppServ发送TGT2和用sessionKey2加密的验证者 -> 收到AppServ的信息 -> if 信息是允许访问 -> Client_Use();
																					 else -> Client_Pre();

Client_Use() = 向AppServ发送访问的具体信息 -> 接受来自AppServ访问的具体信息 -> if 不是错误信息 then Client_Use() else Stop;


AppServ() = [收到Client的验证信息(TGT2和验证者) -> 用sessionKey2解密 -> if 验证通过 then 回复通过 -> AppServ()] | [收到Client的访问信息 -> (if 已验证 then 回复访问信息 else 回复错误) -> AppServ()];

*/
channel C_AS 0;
channel AS_C 0;
channel C_TGS 0;
channel TGS_C 0;
channel TGS_KRB 0;
channel C_App 0;
channel App_C 0;

/*
Client() = C_AS!msg -> AS_C?msg -> C_TGS!msg -> TGS_C?msg -> C_App!msg -> App_C?msg -> Skip;
AS() = C_AS?msg -> AS_C!msg -> AS();
TGS() = C_TGS?msg -> TGS_C!msg -> TGS();
AppServ() = C_App?msg -> App_C?msg -> AppServ();
*/

channel CPre_AS 0;
channel C

//using array to simulate KDC database, the index is user id, and the value is correspond user private key. 
var KDC_DB = [0,1,2,3,4,5];

AS() = CPre_AS?3 -> 